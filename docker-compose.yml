version: '3.8'

services:
  # Databases
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - orchestrator-network
    restart: unless-stopped

  neo4j:
    image: neo4j:5.19
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
    volumes:
      - ./data/neo4j:/data
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - orchestrator-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - orchestrator-network
    restart: unless-stopped

  # Monitoring
  grafana:
    image: grafana/grafana:10.4.0
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./data/grafana:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - orchestrator-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    ports:
      - "9090:9090"
    networks:
      - orchestrator-network
    restart: unless-stopped

  # Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_AUTH=${NEO4J_AUTH}
    volumes:
      - ./workflows:/app/workflows
      - ./config:/app/config
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - neo4j
    networks:
      - orchestrator-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=https://localhost:8000
      - REACT_APP_WS_URL=wss://localhost:8085
    ports:
      - "3000:3000"
    networks:
      - orchestrator-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - frontend
      - backend
    networks:
      - orchestrator-network
    restart: unless-stopped

networks:
  orchestrator-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16